{"version":3,"sources":["../../../api/server/services/BookService.js"],"names":["BookService","database","Book","findAll","newBook","create","id","updateBook","findOne","where","Number","bookToUpdate","update","theBook","bookToDelete","destroy","deletedBook"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;IAEMA,W;;;;;;;;;;;;;;;;;;;uBAGmBC,mBAASC,IAAT,CAAcC,OAAd,E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qDAMAC,O;;;;;;;uBAEAH,mBAASC,IAAT,CAAcG,MAAd,CAAqBD,OAArB,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qDAMGE,E,EAAIC,W;;;;;;;;uBAEON,mBAASC,IAAT,CAAcM,OAAd,CAAsB;AAC7CC,kBAAAA,KAAK,EAAE;AAAEH,oBAAAA,EAAE,EAAEI,MAAM,CAACJ,EAAD;AAAZ;AADsC,iBAAtB,C;;;AAArBK,gBAAAA,Y;;qBAIHA,Y;;;;;;uBACOV,mBAASC,IAAT,CAAcU,MAAd,CAAqBL,WAArB,EAAiC;AAAEE,kBAAAA,KAAK,EAAE;AAAEH,oBAAAA,EAAE,EAAEI,MAAM,CAACJ,EAAD;AAAZ;AAAT,iBAAjC,C;;;kDACCC,W;;;kDAEJ,I;;;;;;;;;;;;;;;;;;;;;;;;;;qDAMOD,E;;;;;;;;uBAEQL,mBAASC,IAAT,CAAcM,OAAd,CAAsB;AACxCC,kBAAAA,KAAK,EAAE;AAAEH,oBAAAA,EAAE,EAAEI,MAAM,CAACJ,EAAD;AAAZ;AADiC,iBAAtB,C;;;AAAhBO,gBAAAA,O;kDAGCA,O;;;;;;;;;;;;;;;;;;;;;;;;;;qDAMSP,E;;;;;;;;uBAEWL,mBAASC,IAAT,CAAcM,OAAd,CAAsB;AAC7CC,kBAAAA,KAAK,EAAE;AAAEH,oBAAAA,EAAE,EAAEI,MAAM,CAACJ,EAAD;AAAZ;AADsC,iBAAtB,C;;;AAArBQ,gBAAAA,Y;;qBAIHA,Y;;;;;;uBAC2Bb,mBAASC,IAAT,CAAca,OAAd,CAAsB;AAC5CN,kBAAAA,KAAK,EAAE;AAAEH,oBAAAA,EAAE,EAAEI,MAAM,CAACJ,EAAD;AAAZ;AADqC,iBAAtB,C;;;AAApBU,gBAAAA,W;kDAGCA,W;;;kDAEJ,I;;;;;;;;;;;;;;;;;;;;;;;;;eAOJhB,W","sourcesContent":["import database from \"../src/models\";\r\n\r\nclass BookService{\r\n    static async getAllBooks(){\r\n        try{\r\n            return await database.Book.findAll();\r\n        } catch (error){\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    static async addBook(newBook){\r\n        try{\r\n            return await database.Book.create(newBook);\r\n        } catch(error){\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    static async updateBook(id, updateBook){\r\n        try{\r\n            const bookToUpdate = await database.Book.findOne({\r\n                where: { id: Number(id) }\r\n            });\r\n\r\n            if(bookToUpdate){\r\n                await database.Book.update(updateBook, { where: { id: Number(id) } });\r\n                return updateBook;\r\n            }\r\n            return null;\r\n        } catch(error){\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    static async getABook(id){\r\n        try{\r\n            const theBook = await database.Book.findOne({\r\n                where: { id: Number(id) }\r\n            });\r\n            return theBook;\r\n        } catch(error){\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    static async deleteBook(id){\r\n        try{\r\n            const bookToDelete = await database.Book.findOne({\r\n                where: { id: Number(id) }\r\n            });\r\n\r\n            if(bookToDelete){\r\n                const deletedBook = await database.Book.destroy({\r\n                    where: { id: Number(id) }\r\n                });\r\n                return deletedBook;\r\n            }\r\n            return null;\r\n        } catch(error){\r\n            throw error;\r\n        }\r\n    }\r\n}\r\n\r\nexport default BookService;"],"file":"BookService.js"}