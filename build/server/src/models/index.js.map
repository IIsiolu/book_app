{"version":3,"sources":["../../../../api/server/src/models/index.js"],"names":["basename","path","__filename","env","process","NODE_ENV","config","configJson","console","log","db","sequelize","environment","Sequelize","DB_NAME","DB_USER","DB_PASS","host","DB_HOST","port","DB_PORT","dialect","DB_DIALECT","dialectOption","ssl","logging","database","username","password","fs","readdirSync","__dirname","filter","file","indexOf","slice","forEach","model","join","name","Object","keys","modelName","associate"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA,IAAMA,QAAQ,GAAGC,iBAAKD,QAAL,CAAcE,UAAd,CAAjB;;AACA,IAAMC,GAAG,GAAGC,OAAO,CAACD,GAAR,CAAYE,QAAZ,GAAuBD,OAAO,CAACD,GAAR,CAAYE,QAAnC,GAA8C,aAA1D;AAEA,IAAMC,MAAM,GAAGC,mBAAWJ,GAAX,CAAf;AAEAK,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyCN,GAAzC;AAEA,IAAMO,EAAE,GAAG,EAAX;AAEA,IAAIC,SAAJ;;AACA,IAAGL,MAAM,CAACM,WAAP,KAAuB,YAA1B,EAAuC;AACrCD,EAAAA,SAAS,GAAG,IAAIE,qBAAJ,CACVT,OAAO,CAACD,GAAR,CAAYW,OADF,EAEVV,OAAO,CAACD,GAAR,CAAYY,OAFF,EAGVX,OAAO,CAACD,GAAR,CAAYa,OAHF,EAGW;AACnBC,IAAAA,IAAI,EAAEb,OAAO,CAACD,GAAR,CAAYe,OADC;AAEnBC,IAAAA,IAAI,EAAEf,OAAO,CAACD,GAAR,CAAYiB,OAFC;AAGnBC,IAAAA,OAAO,EAAEjB,OAAO,CAACD,GAAR,CAAYmB,UAHF;AAInBC,IAAAA,aAAa,EAAE;AACbC,MAAAA,GAAG,EAAE,IADQ;AAEb,gBAAQ;AAFK,KAJI;AAQnBC,IAAAA,OAAO,EAAE;AARU,GAHX,CAAZ;AAcD,CAfD,MAeO;AACLd,EAAAA,SAAS,GAAG,IAAIE,qBAAJ,CACVP,MAAM,CAACoB,QADG,EACOpB,MAAM,CAACqB,QADd,EACwBrB,MAAM,CAACsB,QAD/B,EACyCtB,MADzC,CAEV;AACC;AACA;AACA;AACD;AANU,GAAZ;AAQD;;AAEDuB,eACGC,WADH,CACeC,SADf,EAEGC,MAFH,CAEU,UAACC,IAAD,EAAU;AAChB,SAAQA,IAAI,CAACC,OAAL,CAAa,GAAb,MAAsB,CAAvB,IAA8BD,IAAI,KAAKjC,QAAvC,IAAqDiC,IAAI,CAACE,KAAL,CAAW,CAAC,CAAZ,MAAmB,KAA/E;AACD,CAJH,EAKGC,OALH,CAKW,UAACH,IAAD,EAAU;AACjB,MAAMI,KAAK,GAAG1B,SAAS,UAAT,CAAiBV,iBAAKqC,IAAL,CAAUP,SAAV,EAAqBE,IAArB,CAAjB,CAAd;AACAvB,EAAAA,EAAE,CAAC2B,KAAK,CAACE,IAAP,CAAF,GAAiBF,KAAjB;AACD,CARH;;AAUAG,MAAM,CAACC,IAAP,CAAY/B,EAAZ,EAAgB0B,OAAhB,CAAwB,UAACM,SAAD,EAAe;AACrC,MAAGhC,EAAE,CAACgC,SAAD,CAAF,CAAcC,SAAjB,EAA2B;AACzBjC,IAAAA,EAAE,CAACgC,SAAD,CAAF,CAAcC,SAAd,CAAwBjC,EAAxB;AACD;AACF,CAJD;AAMAA,EAAE,CAACC,SAAH,GAAeA,SAAf;AACAD,EAAE,CAACG,SAAH,GAAeA,qBAAf;eAEeH,E","sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport Sequelize from 'sequelize';\nimport configJson from '../config/config';\n\nconst basename = path.basename(__filename);\nconst env = process.env.NODE_ENV ? process.env.NODE_ENV : 'development';\n\nconst config = configJson[env];\n\nconsole.log('this is the environment: ', env);\n\nconst db = {};\n\nlet sequelize;\nif(config.environment === 'production'){\n  sequelize = new Sequelize(\n    process.env.DB_NAME,\n    process.env.DB_USER,\n    process.env.DB_PASS, {\n      host: process.env.DB_HOST,\n      port: process.env.DB_PORT,\n      dialect: process.env.DB_DIALECT,\n      dialectOption: {\n        ssl: true,\n        native: true\n      },\n      logging: true\n    }\n  );\n} else {\n  sequelize = new Sequelize(\n    config.database, config.username, config.password, config\n    //'book_test', 'postgres', 'default', {\n     // dialect: 'postgres',\n     // host: '127.0.0.1',\n     // port: 5432,\n    //}\n    );\n}\n\nfs\n  .readdirSync(__dirname)\n  .filter((file) => {\n    return (file.indexOf('.') !== 0) && (file !== basename) && (file.slice(-3) === '.js');\n  })\n  .forEach((file) => {\n    const model = sequelize.import(path.join(__dirname, file));\n    db[model.name] = model;\n  });\n\nObject.keys(db).forEach((modelName) => {\n  if(db[modelName].associate){\n    db[modelName].associate(db);\n  }\n});\n\ndb.sequelize = sequelize;\ndb.Sequelize = Sequelize;\n\nexport default db;"],"file":"index.js"}